datasource db {
  provider = "mysql" // Base de données MySQL
  url      = env("DATABASE_URL") // URL de connexion depuis le fichier .env
}

generator client {
  provider = "prisma-client-js" // Génère le client Prisma pour Node.js
}

// Énumération pour les rôles d'utilisateur
enum Role {
  USER
  ADMIN
}

// Modèle pour les utilisateurs
model User {
  id           Int           @id @default(autoincrement()) // ID unique auto-incrémenté
  nom          String        // Nom de l'utilisateur
  email        String        @unique // Email unique
  motDePasse   String        // Mot de passe de l'utilisateur
  photo        Bytes?        // Photo de profil en binaire (facultatif)
  reservations Reservation[] // Relation avec les réservations
  slots        Slot[]        // Relation avec les créneaux réservés par l'utilisateur
  role         Role          @default(USER) // Rôle par défaut "USER"
  notifications Notification[] // Relation avec les notifications
}

// Modèle pour les réservations
model Reservation {
  id     Int      @id @default(autoincrement()) // ID unique auto-incrémenté
  date   DateTime // Date de la réservation
  heure  String   // Heure de la réservation
  slotId Int      // Référence à un créneau spécifique (Slot)
  slot   Slot     @relation(fields: [slotId], references: [id]) // Relation avec le modèle Slot
  userId Int      // Référence à l'utilisateur ayant fait la réservation
  user   User     @relation(fields: [userId], references: [id]) // Relation avec le modèle User
  course String   // Type de cours (ex : "Piano", "Guitare", etc.)
}

// Modèle pour les contacts
model Contact {
  id        Int        @id @default(autoincrement()) // ID unique auto-incrémenté
  nom       String     // Nom du contact
  email     String     // Email du contact
  message   String     // Message envoyé par le contact
  createdAt DateTime   @default(now()) // Date de création
  responses Response[] // Liste des réponses associées (relation inverse)
}

// Modèle pour les créneaux (slots)
model Slot {
  id           Int           @id @default(autoincrement()) // ID unique auto-incrémenté
  date         DateTime      // Date du créneau
  heure        String        // Heure du créneau
  reserved     Boolean       @default(false) // Indique si le créneau est réservé
  userId       Int?          // Référence à l'utilisateur ayant réservé le créneau (facultatif)
  user         User?         @relation(fields: [userId], references: [id]) // Relation avec le modèle User
  reservations Reservation[] // Relation inverse avec les réservations

  @@unique([date, heure]) // Empêche les doublons pour les créneaux
}


model Response {
  id        Int      @id @default(autoincrement())
  message   String   // Message envoyé par l'administrateur
  createdAt DateTime @default(now())
  contactId Int      // Référence au message de contact
  contact   Contact  @relation(fields: [contactId], references: [id]) // Relation avec Contact
}


model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  createdAt DateTime @default(now())
}
